import socket
import logging
from typing import Callable, Tuple

def create_listener(port: int):
    """Creates a socket listening for connections on the given port."""
    listener = socket.socket()
    listener.bind(('', port))  # bind socket to port
    listener.listen(0)                # start listening
    logging.info(f"Listening on port #{port}")
    return listener


def accept_client(listener: socket.socket, handler: Callable[[str], str]) -> socket:
    """
    Awaits a connection, reads input data, and sends a response generated by the callback function.
    :param socket   A web socket to listen on for connections
    :param handler  A callback function which takes input and generates a response
    """
    (client, address) = listener.accept()
    with client:
        logging.info(f"Accepted connection from {address}")
        # Receive data from client
        client_msg = receive_client_data(client)
        # Handle commands
        response = handler(client_msg)
        send_response(client, response)
        # Implicitly close the client socket


def receive_client_data(client: socket.socket):
    client_data: str = ""
    while True:
        bytes = client.recv(2048)
        if len(bytes) == 0:
            break
        client_data += bytes.decode()  # UTF-
    if (len(client_data) > 0):
        logging.info(f"Received data: \"{client_data}\"")
    return client_data


def send_response(client: socket.socket, response: str):
    response_byte = response.encode()
    client.sendall(response_byte)
    logging.info(f"Sent response: `{response}`")

    